import numpy as np
from qiskit import QuantumRegister, ClassicalRegister, QuantumCircuit, transpile
from qiskit.providers.aer import QasmSimulator
from qiskit.visualization import plot_histogram


# 2. Create a Quantum Circuit acting on the q register (Composer를 이용해 아래 채우기)
qreg_q = QuantumRegister(2,'q')
creg_c = ClassicalRegister(2,'c')
circuit = QuantumCircuit(qreg_q, creg_c)

# 3. Create a Quantum Circuit acting on the q register (Composer를 이용해 아래 채우기)

circuit.x(  )
circuit.h(qreg_q[0])
circuit.x(  )
circuit.cx(qreg_q[0],qreg_q[1])
circuit.measure(qreg_q[0],creg_c[0])
circuit.measure(qreg_q[1],creg_c[1])

# 4. Draw the circuit
circuit.draw()

# 5. Simulate the experiment

# compile the circuit down to low-level QASM instructions
# supported by the backend (not needed for simple circuits)

simulator = QasmSimulator()
compiled_circuit = transpile(circuit, simulator)

# Execute the circuit on the qasm simulator
job = simulator.run(compiled_circuit, shots=1000)

# Grab results from the job
result = job.result()

# Returns counts
counts = result.get_counts(compiled_circuit)
print("\nTotal count for 00 and 11 are:",counts)

# Plot a histogram
plot_histogram(counts)
